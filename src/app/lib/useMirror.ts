import { LENS_CONTRACT_ADDRESS, LENS_CONTRACT_ABI } from "./../const/contracts";
// 1. use the autogenerated mutation hook from graphql codegen called "useCreateCollectTypedDataMutation"
// 2. ask the user to sign the typed data
// 3. send the signed typed data to the lens API to perform the collect write operation on the blockchain

import { useMutation } from "@tanstack/react-query";
import { useSDK } from "@thirdweb-dev/react";
import { useCreateMirrorTypedDataMutation } from "../graphql/generated";
import { signTypedDataWithOmittedTypename, splitSignature } from "./helpers";
import useLensUser from "./auth/useLensUser";

export const useMirror = (publicationId: String) => {
  const { profileQuery } = useLensUser();
  const sdk = useSDK();
  const { mutateAsync: requestTypedData } = useCreateMirrorTypedDataMutation();

  const mirror = async () => {
    // 1. generate the typed data
    const { createMirrorTypedData } = await requestTypedData({
      request: {
        publicationId,
        profileId: profileQuery.data?.defaultProfile?.id,
      },
    });

    if (!sdk) {
      return;
    }

    const { domain, types, value } = createMirrorTypedData.typedData;
    // 2. sign the typed data
    const signature = await signTypedDataWithOmittedTypename(
      sdk,
      domain,
      types,
      value
    );

    const { v, r, s } = splitSignature(signature.signature);

    // 3. send the signed typed data to the lens API to perform the collect write operation on the blockchain
    const lensHubContract = await sdk.getContractFromAbi(
      LENS_CONTRACT_ADDRESS,
      LENS_CONTRACT_ABI
    );

    const result = await lensHubContract.call(
      "mirrorWithSig",
      {
        profileId: value.profileId,
        profileIdPointed: value.profileIdPointed,
        pubIdPointed: value.pubIdPointed,
        referenceModuleData: value.referenceModuleData,
        referenceModule: value.referenceModule,
        referenceModuleInitData: value.referenceModuleInitData,
        sig: {
          v,
          r,
          s,
          deadline: value.deadline,
        },
      },
      { gasLimit: 1000000 }
    );

    console.log("result", result);
  };

  return useMutation(mirror);
};
